1. Java의 특징 설명해주세요.
  Java는 객체지향 프로그래밍 언어,
  객체지향 특징인 추상화, 캡슐화, 상속, 다형성이 잘 적용된 언어입니다.
  장점 : JVM 에서 동작하기에 운영체제에 독립적
        GabageCollector를 통한 자동적인 메모리 관리 가능
  단점 : 다중 상속이나 타입에 엄격하며, 제약이 많음
  
2. JVM의 역할에 대해 설명해주세요.
  JVM은 스택 기반으로 동작하고 OS에 맞게 해석해주고, 가비지컬렉션을 통해 자동적인 메모리 관리해줍니다.
  
  
3. Java의 컴파일 과정에 대해 설명
  개발자 .java 파일 생성
  build하고
  java compiler의 javac의 명령어를 통해 바이트코드(.class)를 생성한다.
  Class Loader를 통해 JVM 메모리 내로 로드한다.
  실행엔진을 통해 각 운영체제에 맞는 기계어로 해석해서 Runtime Data Area에 배치
  
4. Complier vs InterPreter 는 무엇인가
  Complier 프로그램을 runtime 전에 전체 소스를 검사하여 machine code 로 변환한다.
  소스코드 분석하는데 시간이 오래 걸리고
  Object Code를 생성하여 더 많은 메모리 필요
  전체 코드 검사한 후 오류 메시지 생성, 실행 전에 오류를 발견 가능
  ex) C,C++, Java
  
  Interpreter
  프로그램 runtime에 한 번에 한 문장씩 변환
  소스 코드를 분석하는데 시간은 적지만 전체 실행 시간은 complier보다 느림
  Object Code가 만들어지지않아 메모리 효율이 높음
  첫 오류를 만날 때 까지 프로그램을 계속 번역하고 오류 만나면 중지
  프로그램 실행 전에 오류를 발견하기 어려움
  ex) Python
  
5. Java에서 제공하는 원시 타입들에 무엇이 있고, 각각 몇 바이트 차지
  정수형 byte 1 , short 2 , int 4 , long 8 
  실수형 float 4 , double 8
  문자형 char 2
  논리형 boolean 1
  
  참조타입
  Java에서 실제 객체는 힙 영역에 저장되며 참조 타입 변수는 스택 영역에 실제 객체들의 주소를 저장하여, 
  객체를 사용할때 마다 참조 변수에 저장된 객체의 주소를 불러와 사용하는 방식이다.
  
  차이점 
  Null을 담을 수 있는가?
  int i = null;//불가능
  Integer integer = null; //가능
  
  제네릭 타입에서 사용할 수 있는가?
  List<int> i;//불가능
  List<Integer> integer;//가능
  
6. 오버라이딩(Overriding), 오버로딩(Overloading)
  오버라이딩 : 상위 클래스에 있는 메소드를 하위 클래스에서 재정의 하는 것을 말하고,
  오버로딩 : 매개변수의 개수나 타입을 다르게 하여 같은 이름의 메소드를 여러 개 정의한다.
  
7. 객체지향 프로그래밍(OOP)에 대해 설명해주세요.
  객체지향 프로그래밍은 객체의 관점에서 프로그래밍하는 것이다.
  추상화, 캡슐화, 상속, 다형성과 같은 특징이 있으며 코드의 재사용성과 중복제거가 가장 큰 목적이다.
  
  추상화 : 공통의 속성이나 기능을 묶어 이름을 붙이는 것
  캡슐화 : 데이터 구조와 데이터를 다루는 방법들을 결합 시켜 묶는 것
  상속 : 상위 개념의 특징을 하위 개념이 물려받는것
  다형성 : 부모클래스에서 물려받은 가상 함수를 자식 클래스 내에서 오버라이딩 되어 사용되는 것
  
8. 불변 객체가 무엇인지 설명하고 대표적인 Java의 예시를 설명해주세요.
  불변 객체는 객체 생성 이후 내부의 상태가 변하지 않는 객체를 말합니다.
  원시 타입인 경우 final 키워드를 사용해 불변 객체 생성
  참조 타입일 경우엔 추가적인 작업 필요
  
  추가적인 작업은 1. 객체, 2. 배열 3. List가 있는데 
  객체는 필드 참조 변수도 불변 객체로 변경
  배열은 배열을 copy 해서 getter를 clone으로 반환하도록 사용
  리스트인 경우 새로운 List를 만들어서 clone해서 사용
  
9. 불변 객체나 final을 굳이 사용해야 하는 이유가 있을까요?
  불변 객체나 final 키워드를 사용해 얻는 이점은 다음과 같습니다.

  1. Thread-Safe하여 병렬 프로그래밍에 유용하며, 동기화를 고려하지 않아도 된다.
  (공유 자원이 불변이기 때문에 항상 동일한 값을 반환하기 때문)

  2. 실패 원자적인 메소드를 만들 수 있다.
  (어떠한 예외가 발생되더라도 메소드 호출 전의 상태를 유지할 수 있어 예외 발생 전과 똑같은 상태로 다음 로직 처리 가능)

  3. 부수효과를 피해 오류를 최소화 할 수 있다.
  ※ 부수효과 : 변수의 값이 바뀌거나 객체의 필드 값을 설정하거나 예외나 오류가 발생하여 실행이 중단되는 현상

  4. 메소드 호출 시 파라미터 값이 변하지 않는다는 것을 보장할 수 있다.

  5. 가비지 컬렉션 성능을 높일 수 있다.
  (가비지 컬렉터가 스캔하는 객체의 수가 줄기 때문에 Gc 수행 시 지연시간도 줄어든다.)

10. 추상 클래스와 인터페이스 설명하고 차이
  추상 클래스 : 클래스 내 추상 메소드가 하나이상 포함되거나 abstract로 정의된 경우를 말하고
  인터페이스 : 모든 메소드가 추상 메소드로만 이루어져 있는 것을 말합니다.
  
  공통점은 사용하기 위해서는 하위클래스에서 확장/구현해야한다., new 연산자로 인스턴스 생성 불가능
  차이점 : 인터페이스는 모든 클래스에 대해 특정한 메소드가 반드시 존재, 다중상속 가능
         추상클래스는 상속받은 클래스들의 공통적인 로직을 추상화시키고, 기능 확장을 위해 사용, 다중상속 불가능
  
  
